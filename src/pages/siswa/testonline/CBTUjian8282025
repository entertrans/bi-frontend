import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import {
  getTestSession,
  getSoalByTestId,
  saveJawaban,
  submitTest,
} from "../../../api/testOnlineAPI";
import Swal from "sweetalert2";
import { useAuth } from "../../../contexts/AuthContext";

const CBTUjian = () => {
  const { sessionId } = useParams();
  const { user } = useAuth();
  const nis = user?.siswa?.siswa_nis;

  const [session, setSession] = useState(null);
  const [soal, setSoal] = useState([]);
  const [jawaban, setJawaban] = useState({});
  const [waktu, setWaktu] = useState(0);
  const [judul, setJudul] = useState("");
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true);

        // 1. Ambil session data
        const sessionData = await getTestSession(sessionId);
        console.log("Session Data:", sessionData);

        setSession(sessionData);

        // 2. Set waktu dari durasi test (jika ada di session atau perlu query terpisah)
        if (sessionData?.test?.durasi_menit) {
          setWaktu(sessionData.test.durasi_menit * 60);
        }

        // 3. Ambil soal berdasarkan TestID dari session
        if (sessionData?.TestID) {
          const soalData = await getSoalByTestId(sessionData.TestID);
          console.log("Soal Data:", soalData);
          setSoal(soalData);

          // 4. Set judul dari session atau soal
          if (sessionData.test?.judul) {
            setJudul(sessionData.test.judul);
          } else if (soalData.length > 0 && soalData[0]?.test_judul) {
            setJudul(soalData[0].test_judul);
          }
        }
      } catch (err) {
        console.error("Gagal load session ujian:", err);
        Swal.fire(
          "Error",
          err.response?.data?.error || "Gagal memuat ujian",
          "error"
        );
      } finally {
        setLoading(false);
      }
    };

    loadData();
  }, [sessionId]);

  // Timer effect
  useEffect(() => {
    if (waktu > 0) {
      const timer = setInterval(() => {
        setWaktu((w) => {
          if (w <= 1) {
            clearInterval(timer);
            handleSubmit();
            return 0;
          }
          return w - 1;
        });
      }, 1000);

      return () => clearInterval(timer);
    }
  }, [waktu]);

  const handleJawab = async (soalId, val) => {
    try {
      setJawaban((prev) => ({ ...prev, [soalId]: val }));

      await saveJawaban({
        session_id: parseInt(sessionId),
        soal_id: soalId,
        jawaban_siswa: JSON.stringify({ jawaban: val }),
        skor_objektif: 0, // default score
      });
    } catch (err) {
      console.error("Gagal menyimpan jawaban:", err);
      Swal.fire("Error", "Gagal menyimpan jawaban", "error");
    }
  };

  const handleSubmit = async () => {
    try {
      await submitTest(sessionId);
      Swal.fire({
        title: "Selesai",
        text: "Ujian sudah dikumpulkan!",
        icon: "success",
      }).then(() => {
        window.close();
      });
    } catch (err) {
      console.error("Gagal submit ujian:", err);
      Swal.fire(
        "Error",
        err.response?.data?.error || "Gagal mengumpulkan ujian",
        "error"
      );
    }
  };

  const formatTime = (sec) => {
    const m = Math.floor(sec / 60);
    const s = sec % 60;
    return `${m}:${s < 10 ? "0" : ""}${s}`;
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto"></div>
          <p className="mt-3">Memuat ujian...</p>
        </div>
      </div>
    );
  }

  if (!session) {
    return (
      <div className="flex items-center justify-center h-screen">
        <p className="text-red-600">Session tidak ditemukan</p>
      </div>
    );
  }

  return (
    <div className="w-screen h-screen bg-gray-100 dark:bg-gray-900 p-6 overflow-y-auto">
      {/* Header */}
      <div className="flex justify-between items-center mb-6 bg-white p-4 rounded-lg shadow">
        <div>
          <h2 className="text-xl font-bold text-gray-800">
            {judul || `Ujian #${session.TestID}`}
          </h2>
          <p className="text-sm text-gray-600">
            Session ID: {session.SessionID}
          </p>
        </div>
        <div className="text-red-600 font-mono text-2xl font-bold bg-red-100 px-4 py-2 rounded">
          ‚è≥ {formatTime(waktu)}
        </div>
      </div>

      {/* Soal */}
      <div className="space-y-4">
        {soal.map((s, i) => (
          <div key={s.soal_id} className="p-4 bg-white rounded-lg shadow">
            <p className="font-semibold mb-3 text-gray-800">
              <span className="text-purple-600">{i + 1}.</span> {s.pertanyaan}
            </p>

            {s.pilihan_jawaban &&
              JSON.parse(s.pilihan_jawaban).map((opt, idx) => (
                <label
                  key={idx}
                  className="flex items-center space-x-3 p-2 hover:bg-gray-50 rounded cursor-pointer"
                >
                  <input
                    type="radio"
                    name={`soal_${s.soal_id}`}
                    value={opt}
                    checked={jawaban[s.soal_id] === opt}
                    onChange={() => handleJawab(s.soal_id, opt)}
                    className="h-4 w-4 text-purple-600 focus:ring-purple-500"
                  />
                  <span className="text-gray-700">{opt}</span>
                </label>
              ))}
          </div>
        ))}
      </div>

      {/* Submit Button */}
      <div className="mt-6 sticky bottom-4">
        <button
          onClick={handleSubmit}
          className="w-full py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 font-semibold text-lg shadow-lg"
        >
          üìù Submit Ujian
        </button>
      </div>
    </div>
  );
};

export default CBTUjian;
